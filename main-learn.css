h1,
h2,
h3,
h4,
p,
li {
  font-family: sans-serif;
  /* * this #444444 color is good for text color */
  color: #444;
}

h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 30px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
}

h3 {
  font-size: 30px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 21px;
  line-height: 1.5;
}
li {
  font-size: 20px;
}

footer p {
  font-size: 16px;
}

article header p {
  font-style: italic;
}

.main-header {
  background-color: #f7f7f7;
}

aside {
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  background-color: #f7f7f7;
}

/* 
? Pseudo classes

* we specify the first li element in list to bold
* the simple way to do that is add class and style
! but instead do manually we have other way to do it and it's better
* we can actually have css automatically figure out which is the first li element inside of a container
*/
/* .first-li {
  font-weight: bold;
} */

/* 
* So now we will use pseudo class to do it
*/
li:first-child {
  /* * this is called first-child pseudo class */
  /* * select all the first child li elements in the parent container element */
  font-weight: bold;
}

/* * we also have last-child Pseudo class, it also work like first child, different it's last child */
li:last-child {
  font-style: italic;
}
/*
 * we also can specific child like second, third,... n child 
 * we can specify it's keyword: odd(so le) to specify odd number element: 1,3,5,...n, even(so chan) specify even number: 2,4,6,...n
 */
/* li:nth-child(odd) or li:nth-child(even) {
  color: red;
} */
/* 
! this might useful in table style like alternating(xen ke) background colors
*/
/* li:nth-child(2) {
  color: red;
} */
/* 
! A thing to notice about Pseudo class
* so if i want specify the first p element i article and turn color to red 
*/
article p:first-child {
  /* * so we will do like this right
  * but it's not working, because it's not how the first child pseudo class actually works
  * so p element is  the first p element inside of article but it's not the first child of article because the first child article is <header> element so it's not <p> element
  * so that's why this style CSS not work and it's only work when the <p> will be first child element of article
  */

  color: red;
}

/* article p:last-child {
  color: red;
} */

/* ?STYLE WITH LINKS(HYPERLINKS) */

/* *basic style with links with selector anchor <a> element */
/* a {
  color: #1098ad;
} */
/* 
! however it's not good practice, we should not simply select anchor and style them
* instead we should style a pseudo(gia) class of the anchor because that will then allow us to target different states
*/
a:link {
  /* * use pseudo link class to target all the anchor element that have an href attribute 
  * because if we use <a> selector it'll target all <a> element even <a> not have href(not really link) so it's not good
  * with this we target to actual link
  */
  color: #1098ad;
  /* *text-decoration: remove underline of link, and usyally we always use none value for this */
  text-decoration: none;
}

/* * visited pseudo class to style <a> element after they click
! But in practice we never do that, so on normal pages usually we always just give the visited links the same color as on the link pseudo class
* we can see visited pseudo class look like link pseudo class so actually we can group them to one
*/
a:visited {
  /* color: red; */
  color: #1098ad;
}

/* 
* hover pseudo class which more important
* with hover pseudo class we can define any style that we want to be applied to the anchor as soon as the element is hovered by the mouse
*/
a:hover {
  color: rgba(255, 0, 0, 0.39);
  font-weight: bold;
  text-decoration: underline solid olivedrab;
  /* * text-decoration is shorthand property cuz we can defined mutiple values text-decoration: line, style, color
  ! we don't need specify all three values, we can specify 1 or 2 or 3
  */
}

/* 
* active pseudo class
* this is a state in which we are actually clicking, when we click on the link that time the active pseudo class is added to element
*/
a:active {
  /* color: red; */
  background-color: black;
  font-style: italic;
}
/* 
! we have these four state of pseudo class always defined in this exact order link -> visited -> hover -> active => LVHA
*/
