* {
  padding: 0;
  margin: 0;
}
/* ? ABSOLUTE POSITIONING
* RECAP: with absolute positioning you can basically put any element that you want wherever you want it to be on the page and of course can be quite helpful
* now important that you don't abuse(lam dung) this newfound power so don't use this to build complex layouts
* for example instean we use absolute positioning for single elements like this button other small things
! but in the real world we don't use this for example to position menu like in the top of page or to position for example author image
* for those things we will use special techniques for building layouts
! don't simply reach for absolute  positioning for example to build layouts
*/

body {
  color: #444;
  font-family: sans-serif;

  border-top: 10px solid #1098ad;
  /* * we need to set relative to become the relative element of like button and no it's not viewport
  * of course we can also position this like button to inside any other parent element not must be body */
  position: relative;
}

/** PAGE SECTION */
.container {
  width: 700px;
  margin: 0 auto;
  /* * let try position like button to container parent element and we need to set position relative 
  ! Notice if the parent element contain this don't have relative position so it'll find the bigger container for have relative and if it's not found well it will relation with viewport by default
  * other hand we can say the first relative parent is relation with absolute positioned */

  /* position: relative; */
}

.main-header {
  background-color: #f7f7f7;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
}

.post-header {
  margin-bottom: 30px;
  /* * let test the first relative parent is will apply and this header is the parent container of this like button */
  /* position: relative; */
  /* * so now it's work because it's the first relatived position parent container of this like button
  * if it's not relative well the relative bigger parent container will take it and if not it'll relation to viewport by default */
}

nav {
  font-size: 18px;
}

article {
  margin-bottom: 60px;
}

aside {
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  background-color: #f7f7f7;
  padding: 30px 0;
  /* * we can use width and height property to specify dismensions of element */
  width: 500px;
}

/* *SMALLER ELEMENT */
h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 30px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 35px;
  margin-bottom: 20px;
  /* * set relatived position paren container element  */
  position: relative;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  /* ! we have problem here because the before element also have margin-bottom: 15px and now we use margin-top: 40px and it looks like 15+40= 55px 
  !but in fact it's not, space of two element is 40px not 55 px
  * and this phenomena is called collapsings(thu gon) margins so basically when we have two margin that occupied the same space only one of them is actually visible on the page and that is usually the larger of the two
  ? if the values in the same? so it just take random one of two like 40px + 40px = 80 px but in fact it's 40px for space of two elements
  * and so if you want the space is 55 px maybe we need specify space of one of two element is 55px*/
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 21px;
  line-height: 1.5;
  margin-bottom: 15px;
}
li {
  /* * we can consvert the block-level element to inline element 
  * and so now they are side by side*/
  font-size: 20px;
  margin-bottom: 20px;
  display: inline;
}
li:last-child {
  margin-bottom: 0;
}

footer p {
  font-size: 16px;
}

article header p {
  font-style: italic;
}

/* * we need some space to display the numbers, and points on the list because we reseted margin and paddin in our page right */
ul,
ol {
  margin-left: 30px;
  margin-bottom: 20px;
}

li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

article p:first-child {
  color: red;
}

a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  color: #1098ad;
}

a:hover {
  color: rgba(255, 0, 0, 0.39);
  font-weight: bold;
  text-decoration: underline solid olivedrab;
}

a:active {
  /* color: red; */
  background-color: black;
  font-style: italic;
}

a {
  color: red;
}

#copyright {
  color: red;
}

.copyright {
  color: #1098ad;
}

.text {
  color: #444;
}
footer p {
  color: #f7f7f7 !important;
}
.post-img {
  /* ! the image is inline element but infact it has behave like inline-block elements */
  width: 100%;
  height: auto;
  /* * and to demonstrate we can add some margin */
  /* margin: 100px; */
  /* * and if it's purely inline element so it's not work with margin top and bottom right */
}

nav a:link {
  /* background-color: #ffa500; */
  /* * this is an inline element so we can see the box model don't apply exactly 
   * only apply for left and right sides right, and dot't effect to vertical space top and bottom
  */
  /* margin: 20px; */
  /* *it's alos similar with padding */
  /* padding: 20px; */
  /* * so if we want it like block-level element have some space and elements one after another we can use display property to consvert to block-level element */
  /* display: block; */
  /* * now the anchor element here has all conditions to of being a block-level element
  * so now the box model applies to them normally, and they can occupy 100% width and all other of box model */
  /* 
! now we can use inline-block boxes for this 
*/
  display: inline-block;
  /* padding: 20px; 
  ! when we add some space for between elements we should use margin*/
  margin-right: 20px;
  margin-top: 20px;
}

/* * we can chain pseudo class 
* so many times that;s important to do to remove the space of last element not nessecary
*/
nav a:link:last-child {
  margin-right: 0;
}

button {
  position: absolute;
  font-size: 22px;
  padding: 20px;
  cursor: pointer;
  /* * we can set it to absolute but we need specify top, bottom, left, or right to this position really work if we don't have one of them it's not work */
  position: absolute;
  /* * we should top and left position to 0 and it's good start point
  * and it is being counted from the top of the viewport which is visible part of the page
  * by default this element is positioned in relation to viewport
  * now it's out of flow and can overlap any element
  * because it's absolute position so when we change the window it's not change anything */
  /* top: 50px;
  left: 50px; */
  /* ! the important here the top 50px and left 50px need to relation something 
  * and by default these 50px here are in relation to the viewport so the visible part of the page in browser you can see that we set bottom 0 it move down to last one of the page
  !however that's not usually what we want, usually we want absolutely position the element in relation some other parent element
  * and in order to do that we need to specifycally set the position of that parent element to relative
  * in this case we want  this element here to be positioned in the right bottom corner of the page of the page not of the viewport */
  bottom: 50px;
  right: 50px;
  /* !Now itâ€™s not working right with what we want because it work relation to viewport not the page so we need set position to relative on the page and that is body element */
}

/*
  * Example change icon in h1 content is not italic cuz it's not make sense by use pseudo elements feature of CSS 
  * notice that pseudo classes write with one colon but to specify sudo element we can use two colons(dau 2 cham): :: and with that we can easily distinguish between pseudo elements and pseudo classes
  *and in this case we can use first-letter pseudo element to do it
  */
h1::first-letter {
  font-style: normal;
  margin-left: 5px;
}
/* *we can use this not only h1 element and can use for other element text like h1, p,... but not for emojis 
* so basically we selected this pseudo element which again is not actually an element in the HTML but it  as if it was an element that we can select and then style right here*/

/* h2::first-letter {
  font-size: 60px;
} */

/* p::first-line {
  color: #ff0000;
} */

/* * new selector which is adjacent element selector or the adjacent sibling selector
* so a sibling element is basically an element that is part of the same parent
* like in main-header we have two element h1, nav and two this is sibling 
* like in article class product we have many elements like h2, p(many p element), ul,... and they also are sibling elements(many p elements also sibling)
* --> Now the adjacent sibling is a sibling that is actually very next element, is basically the sibling that comes right after it
* ---to select adjacent sibling we use + notation
! and so the adjacent element selector which in some cases is actually quite important
*/
/* * we selected h3 adjacent sibling is p element and use first-line pseudo element to set style for the first line p element  */
h3 + p::first-line {
  color: #ff0000;
}

/* ! and now we have two pseudo elements which the most used and most important element which are the after and the before pseudo element 
* so the after pseudo element create a pseudo element that will automatically be the very first child of the selected element
* it's very useful for some small cosmetic style for which we don't want to necessarily add a new element to the HTMLs
* let assume we want some small cosmetic style for after h2 element in our main header 
 */

/* ! we also have before pseudo element
 * but actually that would look exactly the same way
 * the different is that after will basically become the very last child element of the one that we selecting here(in this case it h2 element) while before will become the very first child element
 * but when we specify absolute position we can see that two look like in the same so that doesn't  matter at all how result look like so no matter you use after of before pseudo element
 */
.post-header h2::after {
  /* * and now we need the first property that is mandatory to specify here is the content property 
  * and in here we need write something, but it's also can be a empty string like this "" 
  ! if you don't have content you must to specify this content property basically is empty string and that this point pseudo elements should already be visible in our page*/
  content: "TOP";
  color: #000;
  font-size: 20px;
  font-weight: bold;
  /* * by default any pseudo element is actually an inline element (but may be it's also not true cuz we can called inline level and we can add padding as normal) and therefore we need consvert this to block-level or inline-block box
  * and this is actually one of the great use cases of using inline block*/
  display: inline-block;
  padding: 5px;
  /* cursor: pointer; */
  /* * we can use absolute position to set this pseudo element has a meaningful place
  * and to that first we need defined the relative parent container element in here i also use body as relative parent element again 
  * but now we also can set it with h2 element and use negative length to do it*/
  position: absolute;
  /* * negative length:
  * we can set negative length it'll apply for opposite direction of positive value so out side the element */
  top: -30px;
  right: -30px;
  /* * #ffe70e is good yellow color */
  background-color: #ffe70e;
  /* ! this elemetn we created and styled doesn't exist on HTML code 
  * CSS created it here to style and apply to HTML code
  * and it's also look like the real element*/
}
